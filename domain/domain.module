<?php

/**
 * @file
 * Defines a Domain concept for use with Drupal.
 */

use Drupal\domain\DomainInterface;
use Drupal\domain\Entity\Domain;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_bundle_info().
 */
function domain_entity_bundle_info() {
  $bundles['domain']['domain'] = array(
    'label' => t('Domain record'),
    'admin' => array(
      'real path' => 'admin/config/domain',
    ),
  );
  return $bundles;
}

/**
 * Returns the id of the default domain.
 *
 * @return
 *   The id of the default domain or FALSE if none is set.
 */
function domain_default_id() {
  $loader = Drupal::service('domain.loader');
  return $loader->loadDefaultId();
}

/**
 * Returns the default domain.
 *
 * @return Domain
 *   The default domain or FALSE if none is set.
 */
function domain_default() {
  $loader = Drupal::service('domain.loader');
  return $loader->loadDefaultDomain();
}

/**
 * Loads multiple domain records.
 *
 * @param array $ids
 *   (optional) An array of entity IDs. If omitted, all entities are loaded.
 * @param bool $reset
 *   (optional) Whether to reset the internal cache.  Defaults to FALSE.
 *
 * @return array
 *   An array of domain entities indexed by domain_id.
 */
function domain_load_multiple(array $ids = NULL, $reset = FALSE) {
  $loader = Drupal::service('domain.loader');
  return $loader->loadMultiple($ids, $reset);
}

/**
 * Loads multiple domain records and sorts by weight.
 *
 * @param array $ids
 *   (optional) An array of entity IDs. If omitted, all entities are loaded.
 * @param bool $reset
 *   (optional) Whether to reset the internal cache.  Defaults to FALSE.
 *
 * @return array
 *   An array of domain entities indexed by domain_id and sorted by weight.
 */
function domain_load_and_sort(array $ids = NULL, $reset = FALSE) {
  $loader = Drupal::service('domain.loader');
  return $loader->loadMultipleSorted($ids, $reset);
}

/**
 * Return the domain entity matching a domain id.
 *
 * @param $id
 *   The domain id.
 * @param bool $reset
 *   (optional) Whether to reset the internal cache. Defaults to FALSE.
 *
 * @return Drupal\domain\Entity\Domain|FALSE
 *   The domain entity, if exists, FALSE otherwise. Results are
 *   statically cached.
 */
function domain_load($id = NULL, $reset = FALSE) {
  return entity_load('domain', $id, $reset);
}

/**
 * Return the domain entity matching a hostname.
 *
 * @param $hostname
 *   The domain hostname.
 *
 * @return Drupal\domain\Entity\Domain|FALSE
 *   The domain entity, if exists, FALSE otherwise. Results are
 *   statically cached.
 */
function domain_load_hostname($hostname) {
  $loader = Drupal::service('domain.loader');
  return $loader->loadByHostname($hostname);
}

/**
 * Creates a new Domain entity record with default values.
 *
 * @param $inherit
 *   Boolean flag indicating that the new domain should inherit values from the
 *   current $_SERVER request. Useful for creating domain records on install.
 *
 * @param $values
 *   An array of values to be set when the domain object is created. If the
 *   $inherit property is set to TRUE, some values may be overridden.
 *
 * @return Drupal\domain\Entity\Domain
 *   A domain entity, with preset values for the current environment.
 */
function domain_create($inherit = FALSE, array $values = array()) {
  $creator = Drupal::service('domain.creator');
  return $creator->createDomain($values, $inherit);
}

/**
 * Generates a unique numeric id.
 *
 * @TODO: Move this to Domain Access, which needs it?
 */
function domain_next_id() {
  $creator = Drupal::service('domain.creator');
  return $creator->createNextId();
}

/**
 * Creates a base hostname for the current request.
 *
 * This function is used extensively in testing and domain creation, as it
 * ensures that our code is agnostic of the current server.
 *
 * @return string
 *   The hostname portion of the current HTTP request, or 'localhost' if one is
 *   not set.
 */
function domain_hostname() {
  $creator = Drupal::service('domain.creator');
  return $creator->createHostname();
}

/**
 * Creates a machine name for a domain record.
 *
 * @param $hostname
 *  The hostname string of the record, which should be unique.
 *
 * @return
 *  A string with dot and colon transformed to underscore.
 */
function domain_machine_name($hostname) {
  $creator = Drupal::service('domain.creator');
  return $creator->createMachineName($hostname);
}

/**
 * Returns an array of required fields for a domain record.
 *
 * @return array
 *   An array of required field keys.
 */
function domain_required_fields() {
  $validator = Drupal::service('domain.validator');
  return $validator->getRequiredFields();
}

/**
 * Returns the current domain record.
 */
function domain_get_domain() {
  $negotiator = Drupal::service('domain.negotiator');
  return $negotiator->getActiveDomain();
}

/**
 * Returns the id of the current domain record.
 */
function domain_get_active_id() {
  $negotiator = Drupal::service('domain.negotiator');
  return $negotiator->getActiveId();
}

/**
 * Generates an array for rendering the given domain.
 *
 * @param Drupal\domain\DomainInterface $domain
 *   A domain entity.
 * @param $view_mode
 *   (optional) View mode, e.g., 'full', 'teaser'... Defaults to 'full.'
 * @param $langcode
 *   (optional) A language code to use for rendering. Defaults to NULL which is
 *   the global content language of the current request.
 *
 * @return
 *   An array as expected by drupal_render().
 */
function domain_view(DomainInterface $domain, $view_mode = 'full', $langcode = NULL) {
  return entity_view($domain, $view_mode, $langcode);
}

/**
 * Constructs a drupal_render() style array from an array of loaded domains.
 *
 * @param $domains
 *   An array of domains as returned by domain_load_multiple().
 * @param $view_mode
 *   (optional) View mode, e.g., 'full', 'teaser'... Defaults to 'teaser.'
 * @param $langcode
 *   (optional) A language code to use for rendering. Defaults to the global
 *   content language of the current request.
 *
 * @return
 *   An array in the format expected by drupal_render().
 */
function domain_view_multiple($domains, $view_mode = 'teaser', $langcode = NULL) {
  return entity_view_multiple($domains, $view_mode, $langcode);
}

/**
 * Implements hook_entity_load().
 *
 * The $domain->path and $domain->uri properties are derived from data in the
 * {domain} table. We use the hook system to load that data to indicate that
 * the data is not native to the object.
 *
 * This action is performed in hook_entity_load(), which precedes the running
 * of hook_domain_load() and ensures that our data is present for other modules.
 */
function domain_entity_load(array $entities, $entity_type) {
  if ($entity_type == 'domain') {
    foreach ($entities as $domain) {
      $domain->setPath();
      $domain->setUrl();
    }
  }
}

/**
 * Returns a list of all domains, suitable for use in a form.
 *
 * @TODO: Access control.
 *
 * @return array
 *   A list of domains, keyed by id.
 */
function domain_options_list() {
  $loader = Drupal::service('domain.loader');
  return $loader->loadOptionsList();
}
