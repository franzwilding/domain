<?php

/**
 * @file
 * Maps multiple host requests to a single domain record.
 */

use Drupal\domain\DomainInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function domain_alias_help($path, $arg) {
  switch ($path) {
    case 'admin/structure/domain/alias/%':
      return 'foo';
  }
}

/**
 * Return the domain alias entity matching a domain alias id.
 *
 * @param $id
 *   The domain alias id.
 * @param bool $reset
 *   (optional) Whether to reset the internal cache. Defaults to FALSE.
 *
 * @return Drupal\domain_alias\Entity\DomainAlias|FALSE
 *   The domain alias entity, if exists, FALSE otherwise. Results are
 *   statically cached.
 */
function domain_alias_load($id = NULL, $reset = FALSE) {
  return entity_load('domain_alias', $id, $reset);
}

/**
 * Return the domain alias entity matching an alias pattern.
 *
 * @param string $pattern
 *   An alias pattern, such as *.example.com.
 * @param bool $reset
 *   (optional) Whether to reset the internal cache. Defaults to FALSE.
 *
 * @return Drupal\domain_alias\Entity\DomainAlias|FALSE
 *   The domain alias entity, if it exists, FALSE otherwise. Results are
 *   statically cached.
 */
function domain_alias_pattern_load($pattern) {
  $entities = entity_load_multiple_by_properties('domain_alias', array('pattern' => $pattern));
  if (empty($entities)) {
    return FALSE;
  }
  return current($entities);
}

/**
 * Implements hook_domain_request_alter().
 *
 * The logic in this function gives us the following matches for a request to
 * foo.example.com.
 *
 *   'foo.*'
 *   '*.example.com'
 *   'foo.*.com'
 *   'foo.example.*'
 *   '*.foo.example.com'
 *   'foo.example.com.*'
 *
 * These patterns should be sufficient for most conditions.
 */
function domain_alias_domain_request_alter(DomainInterface &$domain) {
  $hostname = $domain->getHostname();
  if ($alias = domain_alias_match_hostname($hostname)) {
    if ($domain = domain_load($alias->getDomainId())) {
      $domain->addProperty('alias', $alias->getPattern());
      $redirect = $alias->getRedirect();
      if (!empty($redirect)) {
        $domain->setRedirect($redirect);
      }
    }
    // @TODO: error capture?
  }
}

/**
 * Tries to match an http hostname to a registered alias.
 *
 * @param string $hostname
 *   The hostname value (generally $_SERVER['HTTP_HOST']).
 *
 * @return Drupal\domain_alias\Entity\DomainAlias|FALSE
 *   A matching domain alias entity, if it exists, FALSE otherwise.
 */
function domain_alias_match_hostname($hostname) {
  $parts = explode('.', $hostname);
  $patterns = array($hostname);
  $patterns[] = $parts[0] . '.*';
  $count = count($parts);
  for ($i = 0; $i < $count; $i++) {
    $temp = $parts;
    $temp[$i] = '*';
    $patterns[] = implode('.', $temp);
  }
  $patterns[] = '*.' . $hostname;
  $patterns[] = $hostname . '.*';
  uasort($patterns, 'domain_alias_sort');
  foreach ($patterns as $pattern) {
    if ($alias = domain_alias_pattern_load($pattern)) {
      return $alias;
    }
  }
  return FALSE;
}

/**
 * Sorts domains by wildcard to float exact matches to the top.
 */
function domain_alias_sort($a, $b) {
  if (substr_count($a, '*') > 0) {
    return 1;
  }
  return 0;
}

/**
 * Implements hook_domain_operations.
 */
function domain_alias_domain_operations(DomainInterface $domain) {
  // Add aliases to the list.
  $id = $domain->id();
  $operations['domain_alias'] = array(
    'title' => t('Aliases'),
    'url' => Url::fromRoute('domain_alias.admin', array('domain' => $id)),
    'weight' => 60,
  );
  return $operations;
}
